{% extends "base.html.j2" %}

{% block heading %}Compare Page
<style>
table.verticalDisplay thead {
float: left;
}

table.verticalDisplay thead th {
display: block;
}

table.verticalDisplay tbody {
float: right;
}

table.verticalDisplay tbody td {
display: block;
}
</style>
{% endblock %}

{% block content %}


    <div class="content">

        <h1 class="h3 mb-2 text-gray-800">Compare</h1>
        
        <p class="mb-4">Select the data you want to show in the DataTables below.</p>


        {# <div id="loading"></div> #}

        <!-- Content Row -->
        <div class="row" id="cards">
        
            <!-- Earnings (Monthly) Card Example -->
            <div class="col-xl-4 col-md-6 mb-4 compare_card" id="1">
                <div class="card border-left-primary shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="card_name text-xs font-weight-bold text-primary text-uppercase mb-1">
                                    Card 1</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">Box ID:</div>
                                <select id="1" class='serial_num_select custom-select custom-select-sm d-flex' style="margin-bottom: 10px;"></select>
                                
                                <div class="table-responsive">
                                    <table class="data_table table table-bordered" id="1" width="100%" cellspacing="0">
                                    {# <table width="100%" class="table table-striped table-bordered table-hover" id="data_table"> #}
                                        <thead></thead>
                                        <tbody></tbody>
                                    </table>
                                    <!-- /.table -->
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>

        <div class="col-xl-1 col-md-1 mb-4" id="drop_buttons">
            
            <button class="btn btn-dark" id="add_table">
                <i class="fas fa-fw fa-plus"></i>
                <span>Add Table</span>
            </button>
            <p></p>
            <button class="btn btn-dark" id="del_table">
                <i class="fas fa-fw fa-minus"></i>
                <span>Remove Table</span>
            </button>
            
        </div>

    </div>
    <!-- /.content -->



    <!-- jQuery -->
    <script src={{url_for('static', filename="vendor/jQuery-3.3.1/jquery-3.3.1.min.js")}}></script>
    <!-- charts.js -->
    <script src={{url_for('static', filename="vendor/chart.js-3.4.1/package/dist/chart.min.js")}}></script>
    <script>

    function generateChart(x_axis, x_data, y_axis, y_data) {
        
        var data = {x: x_data, y: y_data};
        console.log(data);
        
        var ctx = document.getElementById("myChart");

        var myChart = new Chart(ctx, {
        type: 'scatter',
        data: {
            labels: x_data,
            datasets: [{
                label: y_axis,
                data: data
            }]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero:false
                    }
                }]
            }
        },
        // Boolean - whether or not the chart should be responsive and resize when the browser does.

        responsive: true,

        // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container

        maintainAspectRatio: false,
        });

    return myChart;
    };

    function onlyUnique(value, index, self) {
        return self.indexOf(value) === index;
    };

    function getAllIndexes(arr, val) {
        var indexes = [], i;
        for(i = 0; i < arr.length; i++)
            if (arr[i] === val)
                indexes.push(i);
        return indexes;
    };

    $(document).ready(function() {
        var df_k = null;
        var df_v = null;
        //var df_rows = null;

        var tables = [null];

        var df = {{ cham_df }};

        df_k = Object.keys(df);
        //console.log(df_k)
        df_v = Object.values(df);
        //console.log(df_v)

        serial_nums = Object.values(df_v[df_k.indexOf("SerialNumber")]);

        var unique_nums = serial_nums.filter(onlyUnique).sort();

        dropdown = document.getElementsByClassName("serial_num_select")[0];
        var options = "";
        unique_nums.forEach((element, index) => {
            options += "<option id="+index+" value="+element+">"+element+"</option>";
        });
        dropdown.innerHTML += options;

        card_count = 1;

        // Fetch the cards element
        var cards = document.getElementById('cards');
        
        var first_compare = $('.compare_card').first()
        
        // Fetch the first card and clone it
        var compare_copy = first_compare.clone(true);

        first_compare.find('select').bind('change', selectChange).trigger('change');


        function selectChange(e) {

            columns = [];
            df_k.forEach((element, id) => {
                columns.push({"title": element});
            });

            // Convert object array into array array for use with DT
            df_v.forEach((element, index) => {
                df_v[index] = Object.values(element);
            });

            // Maps the columns back into rows to be used by DataTables
            var val_cols = df_v[0].map(function(col, i) {
                return df_v.map(function(row) {
                    return row[i];
                });
            });
            

            df_ser_index = getAllIndexes(serial_nums, $(this).val());
            
            val_cols = df_ser_index.map((item) => val_cols[item]);

            i = this.id - 1;

            if (tables[i] !== null) {
                tables[i].destroy();
                tables[i] = null;
                $(this).parent().find('table').empty();
            };
            tables[i] = $(this).parent().find('table').DataTable({
                data: val_cols,
                columns: columns,
                scrollY:        "440px",
                scrollX:        true,
                scrollCollapse: true,
                paging:         false,
                fixedHeader:    true,
                fixedColumns:   true
            });

        };

        // Event listener for when the "Add Table" button is clicked
        $("#add_table").click(function () {
            // Increment card_count
            card_count++;
            tables.push(null);

            compare_temp = compare_copy.clone(true).appendTo("#cards");
            // Change the id of the cloned card to the next available one
            compare_temp.attr("id", card_count);
            // Change the text for the card to be the same as its id
            compare_temp.find('.card_name').text("Card "+compare_temp.prop("id"));
            compare_temp.find('select').attr('id',compare_temp.prop('id'));

            // DOES THIS WORK????
            compare_temp.find('select').bind('change', selectChange).trigger('change');

            compare_temp.find('.data_table').attr('id',compare_temp.prop('id'));

            // Add the new card to the cards div
            //cards.innerHTML += compare_temp.prop('outerHTML');
        });

        // Event listener for when the "Remove Table" button is clicked
        $('#del_table').click(function () {
            if (card_count > 1) {
                // Variable for highest id of card to be stored in
                var high_card = null;
                // Variable for highest id found (COULD USE CARD_COUNT?)
                var max = 0;
                // For each 'compare_card'...
                $('.compare_card').each(function() {
                    // Check if its id is larger than the current max
                    if (this.id > max) {
                        // If it is 
                        high_card = $(this);
                        max = this.id;
                    };
                });
                high_card.remove();
                tables.pop();
                card_count--;
            } else {
                console.log("Do you really want to delete the last card?")
            };
        });


        //$("select").each(selectEach).trigger("change");


        //chart = generateChart(xaxis, xdata, yaxis, ydata);

    });

    </script>


{% endblock %}

{% block scripts %}

   <!-- DataTables JavaScript -->
   <script src={{url_for('static', filename="vendor/DataTables-1.10.25/js/jquery.dataTables.js")}}></script>
   {# <script src={{url_for('static', filename="vendor/datatables-plugins/dataTables.bootstrap.js")}}></script> #}
   <script src={{url_for('static', filename="vendor/Responsive-2.2.9/js/dataTables.responsive.js")}}></script>

{% endblock %}